version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: plots-postgres
    environment:
      POSTGRES_DB: plots_db
      POSTGRES_USER: plots_user
      POSTGRES_PASSWORD: plots_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - plots-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plots_user -d plots_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: plots-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: plots_db
      DB_USER: plots_user
      DB_PASSWORD: plots_password
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - plots-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: plots-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - plots-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  plots-network:
    driver: bridge